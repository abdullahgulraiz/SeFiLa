const _ = require("lodash");

const unmatchedPredictions = [
    [
        98,
        1321,
        1322
    ],
    // [
    //     43,
    //     63,
    //     108,
    //     1337,
    //     1338
    // ],
    // [
    //     223,
    //     224,
    //     225
    // ],
    // [
    //     210,
    //     211,
    //     215,
    //     216,
    //     221,
    //     222
    // ],
    // [
    //     97,
    //     103,
    //     231,
    //     1339,
    //     1340,
    //     1343
    // ],
    // [
    //     36,
    //     93
    // ],
    // [
    //     8,
    //     27,
    //     58,
    //     115,
    //     1329,
    //     1330,
    //     1331,
    //     1335
    // ],
    // [
    //     61,
    //     76
    // ],
    // [
    //     32,
    //     39,
    //     1341,
    //     1342
    // ],
    // [
    //     213,
    //     214,
    //     219,
    //     220,
    //     228,
    //     229
    // ],
    // [
    //     38,
    //     72
    // ],
    // [
    //     50,
    //     111,
    //     1349,
    //     1350
    // ],
    // [
    //     68,
    //     1328
    // ],
    // [
    //     5,
    //     88
    // ],
    // [
    //     23,
    //     29,
    //     30,
    //     40,
    //     102,
    //     1344,
    //     1345,
    //     1346,
    //     1347,
    //     1348
    // ]
];
const corpus = {
    "0": "the log_cookie function mod_log_config.c mod_log_config module apache http server 2.4.8 allows remote attackers cause denial service (segmentation fault daemon crash) via crafted cookie properly handled truncation.",
    "1": "an issue discovered cookie crate 0.7.6 rust. large integers max-age cookie cause panic.",
    "2": "ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity",
    "3": "when http/2 stream destroyed handled, apache http server prior version 2.4.30 could written null pointer potentially already freed memory. the memory pools maintained server make vulnerability hard trigger usual configurations, reporter team could reproduce outside debug builds, classified low risk.",
    "4": "an issue discovered function addmebyrc smart contract implementation rc, ethereum token, allows attackers transfer arbitrary amount tokens arbitrary address.",
    "5": "the mod_deflate module apache httpd 2.2.11 earlier compresses large files completion even associated network connection closed, allows remote attackers cause denial service (cpu consumption).",
    "6": "oracle webserver 2.1 earlier runs setuid root, configuration file owned oracle account, allows local remote attacker obtains access oracle account gain privileges modify arbitrary files modifying configuration file.",
    "7": "race condition mod_status module apache http server 2.4.10 allows remote attackers cause denial service (heap-based buffer overflow), possibly obtain sensitive credential information execute arbitrary code, via crafted request triggers improper scoreboard handling within status_handler function modules/generators/mod_status.c lua_ap_scoreboard_worker function modules/lua/lua_request.c.",
    "8": "versions lodash 4.17.12 vulnerable prototype pollution. the function defaultsdeep allows malicious user modify prototype object via {constructor: {prototype: {...}}} causing addition modification existing property exist objects. update version 4.17.12 later. versions lodash lower 4.17.12 vulnerable prototype pollution. the function defaultsdeep could tricked adding modifying properties object.prototype using constructor payload.",
    "9": "directory traversal vulnerability apache http server tomcat 5.x 5.5.22 6.x 6.0.10, using certain proxy modules (mod_proxy, mod_rewrite, mod_jk), allows remote attackers read arbitrary files via .. (dot dot) sequence combinations (1) \"/\" (slash), (2) \"\\\" (backslash), (3) url-encoded backslash (%5c) characters url, valid separators tomcat apache.",
    "10": "the apache http server 2.4.23 follows rfc 3875 section 4.1.18 therefore protect applications presence untrusted client data http_proxy environment variable, might allow remote attackers redirect application's outbound http traffic arbitrary proxy server via crafted proxy header http request, aka \"httpoxy\" issue. note: vendor states \"this mitigation assigned identifier cve-2016-5387\"; words, cve id vulnerability.",
    "11": "github chosen publish cve withdrawn advisory due security issue. see issue details. \"** disputed ** a command injection vulnerability lodash 4.17.21 allows attackers achieve arbitrary code execution via template function. this different parameter, method, version cve-2021-23337. note: vendor's position developer's responsibility ensure template evaluate code originates untrusted input. github chosen publish cve withdrawn advisory due security issue. see issue details. \"** disputed ** a command injection vulnerability lodash 4.17.21 allows attackers achieve arbitrary code execution via template function. this different parameter, method, version cve-2021-23337. note: vendor's position developer's responsibility ensure template evaluate code originates untrusted input.",
    "12": "a carefully crafted request body cause buffer overflow mod_lua multipart parser (r:parsebody() called lua scripts). the apache httpd team aware exploit vulnerabilty though might possible craft one. this issue affects apache http server 2.4.51 earlier.",
    "13": "a crafted request uri-path cause mod_proxy forward request origin server choosen remote user. this issue affects apache http server 2.4.48 earlier.",
    "14": "php remote file inclusion vulnerability index.php nayco jasmine (aka jasmine-web) allows remote attackers execute arbitrary php code via ftp url section parameter. php remote file inclusion vulnerability index.php nayco jasmine (aka jasmine-web) allows remote attackers execute arbitrary php code via ftp url section parameter.",
    "15": "ecstatic denial service vulnerability. successful exploitation could lead crash application.",
    "16": "cross-site scripting (xss) vulnerability proxy_ftp.c mod_proxy_ftp module apache 2.0.63 earlier, mod_proxy_ftp.c mod_proxy_ftp module apache 2.2.9 earlier 2.2 versions, allows remote attackers inject arbitrary web script html via wildcard last directory component pathname ftp uri.",
    "17": "ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity",
    "18": "** disputed ** apache http server 2.0.47 earlier allows local users bypass .htaccess file restrictions, specified httpd.conf directives deny from all, using errordocument directive. note: vendor disputed issue, since .htaccess mechanism intended restrict external web access, local user already privileges perform operations without using errordocument.",
    "19": "the apache http server 2.2.11 earlier 2.2 versions properly handle options=includesnoexec allowoverride directive, allows local users gain privileges configuring (1) options includes, (2) options +includes, (3) options +includesnoexec .htaccess file, inserting exec element .shtml file.",
    "20": "tools/gdomap.c gdomap gnustep base 1.24.6 earlier, run daemon mode, properly handle file descriptor logger, allows remote attackers cause denial service (abort) via invalid request.",
    "21": "the dav_xml_get_cdata function main/util.c mod_dav module apache http server 2.4.8 properly remove whitespace characters cdata sections, allows remote attackers cause denial service (daemon crash) via crafted dav write request.",
    "22": "an issue discovered crate 2021-02-18 rust. there double free (in through_and) upon panic map function.",
    "23": "arbitrary file creation, arbitrary file overwrite, arbitrary code execution node-tar aims guarantee file whose location would modified symbolic link extracted. this is, part, achieved ensuring extracted directories symlinks. additionally, order prevent unnecessary stat calls determine whether given path directory, paths cached directories created. this logic insufficient extracting tar files contained directory symlink name directory. this order operations resulted directory created added node-tar directory cache. when directory present directory cache, subsequent calls mkdir directory skipped. however, also node-tar checks symlinks occur. by first creating directory, replacing directory symlink, thus possible bypass node-tar symlink checks directories, essentially allowing untrusted tar file symlink arbitrary location subsequently extracting arbitrary files location, thus allowing arbitrary file creation overwrite. this issue addressed releases 3.2.3, 4.4.15, 5.0.7 6.1.2. 3.2.3 || 4.4.15 || 5.0.7 || 6.1.2 users may work around vulnerability without upgrading creating custom filter method prevents extraction symbolic links. users encouraged upgrade latest patch versions, rather attempt sanitize tar input themselves. the npm package \"tar\" (aka node-tar) versions 6.1.2, 5.0.7, 4.4.15, 3.2.3 arbitrary file creation/overwrite vulnerability via insufficient symlink protection. `node-tar` aims guarantee file whose location would modified symbolic link extracted. this is, part, achieved ensuring extracted directories symlinks. additionally, order prevent unnecessary `stat` calls determine whether given path directory, paths cached directories created. this logic insufficient extracting tar files contained directory symlink name directory. this order operations resulted directory created added `node-tar` directory cache. when directory present directory cache, subsequent calls mkdir directory skipped. however, also `node-tar` checks symlinks occur. by first creating directory, replacing directory symlink, thus possible bypass `node-tar` symlink checks directories, essentially allowing untrusted tar file symlink arbitrary location subsequently extracting arbitrary files location, thus allowing arbitrary file creation overwrite. this issue addressed releases 3.2.3, 4.4.15, 5.0.7 6.1.2.",
    "24": "ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity",
    "25": "multiple buffer overflows smbvalid/smbval smb authentication library, used apache::authensmb possibly modules, allows remote attackers execute arbitrary commands via (1) long username, (2) long password, (3) unspecified methods.",
    "26": "a possible interaction apple macos x release 1.0 apache http server allows remote attackers cause denial service (crash) via flood http get requests cgi programs, generates large number processes.",
    "27": "versions lodash prior 4.17.19 vulnerable prototype pollution. the function zipobjectdeep allows malicious user modify prototype object property identifiers user-supplied. being affected issue requires zipping objects based user-provided property arrays. this vulnerability causes addition modification existing property exist objects may lead denial service code execution specific circumstances. prototype pollution attack using _.zipobjectdeep lodash 4.17.20.",
    "28": "malformed requests may cause server dereference null pointer. this issue affects apache http server 2.4.48 earlier.",
    "29": "arbitrary file creation, arbitrary file overwrite, arbitrary code execution node-tar aims guarantee file whose location would modified symbolic link extracted. this is, part, achieved ensuring extracted directories symlinks. additionally, order prevent unnecessary stat calls determine whether given path directory, paths cached directories created. this logic insufficient extracting tar files contained two directories symlink names containing unicode values normalized value. additionally, windows systems, long path portions would resolve file system entities 8.3 \"short path\" counterparts. a specially crafted tar archive could thus include directories two forms path resolve file system entity, followed symbolic link name first form, lastly followed file using second form. it led bypassing node-tar symlink checks directories, essentially allowing untrusted tar file symlink arbitrary location subsequently extracting arbitrary files location, thus allowing arbitrary file creation overwrite. the v3 branch node-tar deprecated receive patches issues. if still using v3 release recommend update recent version node-tar. if possible, workaround available below. 6.1.9 || 5.0.10 || 4.4.18 users may work around vulnerability without upgrading creating custom filter method prevents extraction symbolic links. users encouraged upgrade latest patched versions, rather attempt sanitize tar input themselves. the problem addressed following ways, comparing paths directory cache path reservation systems: the npm package \"tar\" (aka node-tar) versions 4.4.18, 5.0.10, 6.1.9 arbitrary file creation/overwrite arbitrary code execution vulnerability. node-tar aims guarantee file whose location would modified symbolic link extracted. this is, part, achieved ensuring extracted directories symlinks. additionally, order prevent unnecessary stat calls determine whether given path directory, paths cached directories created. this logic insufficient extracting tar files contained directory symlink names containing unicode values normalized value. additionally, windows systems, long path portions would resolve file system entities 8.3 \"short path\" counterparts. a specially crafted tar archive could thus include directory one form path, followed symbolic link different string resolves file system entity, followed file using first form. by first creating directory, replacing directory symlink different apparent name resolved entry filesystem, thus possible bypass node-tar symlink checks directories, essentially allowing untrusted tar file symlink arbitrary location subsequently extracting arbitrary files location, thus allowing arbitrary file creation overwrite. these issues addressed releases 4.4.18, 5.0.10 6.1.9. the v3 branch node-tar deprecated receive patches issues. if still using v3 release recommend update recent version node-tar. if possible, workaround available referenced ghsa-qq89-hq3f-393p.",
    "30": "arbitrary file creation, arbitrary file overwrite, arbitrary code execution node-tar aims guarantee file whose location would modified symbolic link extracted. this is, part, achieved ensuring extracted directories symlinks. additionally, order prevent unnecessary stat calls determine whether given path directory, paths cached directories created. this logic insufficient extracting tar files contained directory symlink name directory, symlink directory names archive entry used backslashes path separator posix systems. the cache checking logic used \\ / characters path separators, however \\ valid filename character posix systems. by first creating directory, replacing directory symlink, thus possible bypass node-tar symlink checks directories, essentially allowing untrusted tar file symlink arbitrary location subsequently extracting arbitrary files location, thus allowing arbitrary file creation overwrite. additionally, similar confusion could arise case-insensitive filesystems. if tar archive contained directory foo, followed symbolic link named foo, case-insensitive file systems, creation symbolic link would remove directory filesystem, internal directory cache, would treated cache hit. a subsequent file entry within foo directory would placed target symbolic link, thinking directory already created. these issues addressed releases 4.4.16, 5.0.8 6.1.7. the v3 branch node-tar deprecated receive patches issues. if still using v3 release recommend update recent version node-tar. if possible, workaround available below. 4.4.16 || 5.0.8 || 6.1.7 users may work around vulnerability without upgrading creating custom filter method prevents extraction symbolic links. users encouraged upgrade latest patched versions, rather attempt sanitize tar input themselves. the problem addressed following ways: note means entry objects exposed various parts tar's api always use / path separator, even windows systems. this expected cause problems, / valid path separator windows systems, may result issues entry.path compared path string coming api fs.realpath() path.resolve(). users encouraged always normalize paths using well-tested method path.resolve() comparing paths one another. the npm package \"tar\" (aka node-tar) versions 4.4.16, 5.0.8, 6.1.7 arbitrary file creation/overwrite arbitrary code execution vulnerability. node-tar aims guarantee file whose location would modified symbolic link extracted. this is, part, achieved ensuring extracted directories symlinks. additionally, order prevent unnecessary stat calls determine whether given path directory, paths cached directories created. this logic insufficient extracting tar files contained directory symlink name directory, symlink directory names archive entry used backslashes path separator posix systems. the cache checking logic used `\\` `/` characters path separators, however `\\` valid filename character posix systems. by first creating directory, replacing directory symlink, thus possible bypass node-tar symlink checks directories, essentially allowing untrusted tar file symlink arbitrary location subsequently extracting arbitrary files location, thus allowing arbitrary file creation overwrite. additionally, similar confusion could arise case-insensitive filesystems. if tar archive contained directory `foo`, followed symbolic link named `foo`, case-insensitive file systems, creation symbolic link would remove directory filesystem, _not_ internal directory cache, would treated cache hit. a subsequent file entry within `foo` directory would placed target symbolic link, thinking directory already created. these issues addressed releases 4.4.16, 5.0.8 6.1.7. the v3 branch node-tar deprecated receive patches issues. if still using v3 release recommend update recent version node-tar. if possible, workaround available referenced ghsa-9r2w-394v-53qc.",
    "31": "** disputed ** the apache http server, accessed tcp connection large window size, allows remote attackers cause denial service (network bandwidth consumption) via range header specifies multiple copies fragment. note: severity issue disputed third parties, state large window size required attack normally supported configured server, ddos-style attack would accomplish goal.",
    "32": "apostrophe technologies sanitize-html 2.3.2 properly validate hostnames set \"allowediframehostnames\" option \"allowiframerelativeurls\" set true, allows attackers bypass hostname whitelist iframe element, related using src value starts \"/\\example.com\". apostrophe technologies sanitize-html 2.3.2 properly validate hostnames set \"allowediframehostnames\" option \"allowiframerelativeurls\" set true, allows attackers bypass hostname whitelist iframe element, related using src value starts \"/\\\\example.com\".",
    "33": "rc 1.7.1-5 insecurely creates temporary files.",
    "34": "test-cgi program allows attacker list files server.",
    "35": "directory traversal vulnerability kgb archiver 1.1.5.22 allows remote attackers overwrite arbitrary files wile decompressing archive, possibly due directory traversal sequences filename.",
    "36": "cve-2020-9493 identified deserialization issue present apache chainsaw. prior chainsaw v2.0 chainsaw component apache log4j 1.2.x issue exists.",
    "37": "the rotatelogs program apache 1.3.28, windows os/2 systems, properly ignore certain control characters received pipe, could allow remote attackers cause denial service.",
    "38": "cross-site scripting (xss) vulnerability base_local_rules.php basic analysis security engine (base) 1.4.4 allows remote attackers inject arbitrary web script html via unspecified vectors.",
    "39": "apostrophe technologies sanitize-html 2.3.1 properly handle internationalized domain name (idn) could allow attacker bypass hostname whitelist validation set \"allowediframehostnames\" option. apostrophe technologies sanitize-html 2.3.1 properly handle internationalized domain name (idn) could allow attacker bypass hostname whitelist validation set \"allowediframehostnames\" option.",
    "40": "arbitrary file creation, arbitrary file overwrite, arbitrary code execution node-tar aims prevent extraction absolute file paths turning absolute paths relative paths preservepaths flag set true. this achieved stripping absolute path root absolute file paths contained tar file. for example /home/user/.bashrc would turn home/user/.bashrc. this logic insufficient file paths contained repeated path roots ////home/user/.bashrc. node-tar would strip single path root paths. when given absolute file path repeating path roots, resulting path (e.g. ///home/user/.bashrc) would still resolve absolute path, thus allowing arbitrary file creation overwrite. 3.2.2 || 4.4.14 || 5.0.6 || 6.1.1 note: adjacent issue cve-2021-32803 affects release level. please ensure update latest patch levels address cve-2021-32803 well adjacent issue affects node-tar use case. users may work around vulnerability without upgrading creating custom onentry method sanitizes entry.path filter method removes entries absolute paths. users encouraged upgrade latest patch versions, rather attempt sanitize tar input themselves. the npm package \"tar\" (aka node-tar) versions 6.1.1, 5.0.6, 4.4.14, 3.3.2 arbitrary file creation/overwrite vulnerability due insufficient absolute path sanitization. node-tar aims prevent extraction absolute file paths turning absolute paths relative paths `preservepaths` flag set `true`. this achieved stripping absolute path root absolute file paths contained tar file. for example `/home/user/.bashrc` would turn `home/user/.bashrc`. this logic insufficient file paths contained repeated path roots `////home/user/.bashrc`. `node-tar` would strip single path root paths. when given absolute file path repeating path roots, resulting path (e.g. `///home/user/.bashrc`) would still resolve absolute path, thus allowing arbitrary file creation overwrite. this issue addressed releases 3.2.2, 4.4.14, 5.0.6 6.1.1. users may work around vulnerability without upgrading creating custom `onentry` method sanitizes `entry.path` `filter` method removes entries absolute paths. see referenced github advisory details. be aware cve-2021-32803 fixes similar bug later versions tar.",
    "41": "ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity",
    "42": "lodash versions prior 4.17.21 vulnerable command injection via template function. lodash versions prior 4.17.21 vulnerable command injection via template function.",
    "43": "affected versions moment vulnerable low severity regular expression denial service parsing dates strings. update version 2.19.3 later. the moment module 2.19.3 node.js prone regular expression denial service via crafted date string, different vulnerability cve-2016-4055.",
    "44": "envvars (aka envvars-std) apache http server 2.4.2 places zero-length directory name ld_library_path, allows local users gain privileges via trojan horse dso current working directory execution apachectl.",
    "45": "the package nanoid 3.0.0, 3.1.31, vulnerable information exposure via valueof() function allows reproduce last id generated.",
    "46": "the solaris pollset feature event port backend poll/unix/port.c apache portable runtime (apr) library 1.3.9, used apache http server 2.2.14 products, properly handle errors, allows remote attackers cause denial service (daemon hang) via unspecified http requests, related prefork event mpms.",
    "47": "all versions package static-eval vulnerable arbitrary code execution using functionexpressions templateliterals. poc: var evaluate = require('static-eval'); var parse = require('esprima').parse; var src=\"(function (x) { return ${eval(\"console.log(global.process.mainmodule.constructor._load('child_process').execsync('ls').tostring())\")} })()\" var ast = parse(src).body[0].expression; evaluate(ast) this deemed vulnerability. see issue details.",
    "48": "the npm ci command npm 7.x 8.x 8.1.3 proceeds installation even dependency information package-lock.json differs package.json. this behavior inconsistent documentation, makes easier attackers install malware supposed blocked exact version match requirement package-lock.json.",
    "49": "php remote file inclusion vulnerability index.php nayco jasmine (aka jasmine-web) allows remote attackers execute arbitrary php code via ftp url section parameter. php remote file inclusion vulnerability index.php nayco jasmine (aka jasmine-web) allows remote attackers execute arbitrary php code via ftp url section parameter.",
    "50": "the package vm2 3.9.6 vulnerable sandbox bypass via direct access host error objects generated node internals generation stacktraces, lead execution arbitrary code host machine. the package vm2 3.9.6 vulnerable sandbox bypass via direct access host error objects generated node internals generation stacktraces, lead execution arbitrary code host machine.",
    "51": "versions 4.2.1 earlier jsonwebtoken affected verification bypass vulnerability. this result weak validation jwt algorithm type, occuring attacker allowed arbitrarily specify jwt algorithm. update version 4.2.2 later. versions 4.2.1 earlier jsonwebtoken affected verification bypass vulnerability. this result weak validation jwt algorithm type, occuring attacker allowed arbitrarily specify jwt algorithm. update version 4.2.2 later. in jsonwebtoken node module 4.2.2 possible attacker bypass verification token digitally signed asymmetric key (rs/es family) algorithms instead attacker send token digitally signed symmetric algorithm (hs* family). in jsonwebtoken node module 4.2.2 possible attacker bypass verification token digitally signed asymmetric key (rs/es family) algorithms instead attacker send token digitally signed symmetric algorithm (hs* family). in jsonwebtoken node module 4.2.2 possible attacker bypass verification token digitally signed asymmetric key (rs/es family) algorithms instead attacker send token digitally signed symmetric algorithm (hs* family).",
    "52": "this affects versions package mout. the deepfillin function used 'fill missing properties recursively', deepmixin 'mixes objects target object, recursively mixing existing child objects well'. in cases, key used access target object recursively checked, leading prototype pollution.",
    "53": "this affects package i18n 2.1.15. vulnerability arises insufficient handling erroneous language tags src/i18n/concrete/textlocalizer.cs src/i18n/localizedapplication.cs.",
    "54": "jsdom improperly allows loading local resources, allows local files manipulated malicious web page script execution enabled.",
    "55": "lodash prior 4.7.11 affected by: cwe-400: uncontrolled resource consumption. the impact is: denial service. the component is: date handler. the attack vector is: attacker provides long strings, library attempts match using regular expression. the fixed version is: 4.7.11. lodash prior 4.17.11 affected by: cwe-400: uncontrolled resource consumption. the impact is: denial service. the component is: date handler. the attack vector is: attacker provides long strings, library attempts match using regular expression. the fixed version is: 4.17.11.",
    "56": "in apache httpd 2.2.34 2.4.x 2.4.27, value placeholder [proxy-]authorization headers type 'digest' initialized reset successive key=value assignments mod_auth_digest. providing initial key '=' assignment could reflect stale value uninitialized pool memory used prior request, leading leakage potentially confidential information, segfault cases resulting denial service.",
    "57": "the apache http server 1.x 2.x allows remote attackers cause denial service (daemon outage) via partial http requests, demonstrated slowloris, related lack mod_reqtimeout module versions 2.2.15.",
    "58": "versions lodash 4.17.5 vulnerable prototype pollution. the vulnerable functions 'defaultsdeep', 'merge', 'mergewith' allow malicious user modify prototype object via __proto__ causing addition modification existing property exist objects. update version 4.17.5 later. lodash node module 4.17.5 suffers modification assumed-immutable data (maid) vulnerability via defaultsdeep, merge, mergewith functions, allows malicious user modify prototype \"object\" via __proto__, causing addition modification existing property exist objects.",
    "59": "sql injection vulnerability basic analysis security engine (base) 1.4.4 allows remote attackers execute arbitrary sql commands via unspecified vectors.",
    "60": "ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity",
    "61": "a specially crafted http request header could crashed apache http server prior version 2.4.30 due bound read preparing data cached shared memory. it could used denial service attack users mod_cache_socache. the vulnerability considered low risk since mod_cache_socache widely used, mod_cache_disk concerned vulnerability.",
    "62": "akka http versions <= 10.0.5 illegal media range accept header causes stackoverflowerror leading denial service",
    "63": "versions moment prior 2.11.2 affected regular expression denial service vulnerability. the vulnerability triggered arbitrary user input passed moment.duration(). please update version 2.11.2 later. the duration function moment package 2.11.2 node.js allows remote attackers cause denial service (cpu consumption) via long string, aka \"regular expression denial service (redos).\"",
    "64": "the chunked transfer coding implementation apache http server 2.4.14 properly parse chunk headers, allows remote attackers conduct http request smuggling attacks via crafted request, related mishandling large chunk-size values invalid chunk-extension characters modules/http/http_filters.c.",
    "65": "versions including 5.3.3, enforcing algorithms entry specified configuration. when algorithms specified configuration, combination jwks-rsa, may lead authorization bypass. you affected vulnerability following conditions apply: you using express-jwt and you algorithms configured express-jwt configuration. and you using libraries jwks-rsa secret. specify algorithms express-jwt configuration. the following example proper configuration the fix provided patch affect users specified algorithms allowed. the patch makes algorithms required configuration. ist group in express-jwt (npm package) including version 5.3.3, algorithms entry specified configuration enforced. when algorithms specified configuration, combination jwks-rsa, may lead authorization bypass. you affected vulnerability following conditions apply: - you using express-jwt - you **algorithms** configured express-jwt configuration. - you using libraries jwks-rsa **secret**. you fix specifying **algorithms** express-jwt configuration. see linked ghsa example. this also fixed version 6.0.0. in express-jwt (npm package) including version 5.3.3, algorithms entry specified configuration enforced. when algorithms specified configuration, combination jwks-rsa, may lead authorization bypass. you affected vulnerability following conditions apply: - you using express-jwt - you **algorithms** configured express-jwt configuration. - you using libraries jwks-rsa **secret**. you fix specifying **algorithms** express-jwt configuration. see linked ghsa example. this also fixed version 6.0.0.",
    "66": "exposure sensitive information unauthorized actor npm simple-get prior 4.0.1.",
    "67": "the expat xml parser apr_xml_* interface xml/apr_xml.c apache apr-util 1.3.7, used mod_dav mod_dav_svn modules apache http server, allows remote attackers cause denial service (memory consumption) via crafted xml document containing large number nested entity references, demonstrated propfind request, similar issue cve-2003-1564.",
    "68": "affected versions jws package allow users select algorithm server use verify provided jwt. a malicious actor use behaviour arbitrarily modify contents jwt still passing verification. for common use case jwt bearer token, end result complete authentication bypass minimal effort. update version 3.0.0 later.",
    "69": "mod_proxy apache 1.2.5 earlier allows remote attackers cause denial service via malformed ftp commands, causes apache dump core.",
    "70": "github chosen publish cve withdrawn advisory due security issue. see issue details. \"** disputed ** a command injection vulnerability lodash 4.17.21 allows attackers achieve arbitrary code execution via template function. this different parameter, method, version cve-2021-23337. note: vendor's position developer's responsibility ensure template evaluate code originates untrusted input. github chosen publish cve withdrawn advisory due security issue. see issue details. \"** disputed ** a command injection vulnerability lodash 4.17.21 allows attackers achieve arbitrary code execution via template function. this different parameter, method, version cve-2021-23337. note: vendor's position developer's responsibility ensure template evaluate code originates untrusted input.",
    "71": "withdrawn github withdrawn advisory place ghsa-vh95-rmgr-6w4m ghsa-6chw-6frg-f759. the reason withdrawing mistakes made ingestion cve-2020-7598 caused advisory published incorrect information. in order provide accurate advisory information, new advisories created:",
    "72": "unspecified vulnerability base_local_rules.php basic analysis security engine (base) 1.4.4 allows remote attackers include arbitrary local files via unknown vectors.",
    "73": "apache www server 1.3.1 earlier allows remote attackers cause denial service (resource exhaustion) via large number mime headers name, aka \"sioux\" vulnerability.",
    "74": "apache httpd allows remote attackers read secret data process memory limit directive set user's .htaccess file, httpd.conf certain misconfigurations, aka optionsbleed. this affects apache http server 2.2.34 2.4.x 2.4.27. the attacker sends unauthenticated options http request attempting read secret data. this use-after-free issue thus secret data always sent, specific data depends many factors including configuration. exploitation .htaccess blocked patch ap_limit_section function server/core.c.",
    "75": "integer underflow preview pdfkit apple mac os x 10.4.10 allows remote attackers execute arbitrary code via crafted pdf file.",
    "76": "a specially crafted request could crashed apache http server prior version 2.4.30, due bound access size limit reached reading http header. this vulnerability considered hard impossible trigger non-debug mode (both log build level), classified low risk common server usage.",
    "77": "the stream_reqbody_cl function mod_proxy_http.c mod_proxy module apache http server 2.3.3, reverse proxy configured, properly handle amount streamed data exceeds content-length value, allows remote attackers cause denial service (cpu consumption) via crafted requests.",
    "78": "multiple cross-site scripting (xss) vulnerabilities ibm http server 2.0.47 earlier, used websphere application server products, allow remote attackers inject arbitrary web script html via vectors involving unspecified documentation files (1) manual/ibm/ (2) htdocs/*/manual/ibm/.",
    "79": "minimist 1.2.2 could tricked adding modifying properties object.prototype using \"constructor\" \"__proto__\" payload.",
    "80": "the tls protocol, ssl protocol 3.0 possibly earlier, used microsoft internet information services (iis) 7.0, mod_ssl apache http server 2.2.14 earlier, openssl 0.9.8l, gnutls 2.8.5 earlier, mozilla network security services (nss) 3.12.4 earlier, multiple cisco products, products, properly associate renegotiation handshakes existing connection, allows man-in-the-middle attackers insert data https sessions, possibly types sessions protected tls ssl, sending unauthenticated request processed retroactively server post-renegotiation context, related \"plaintext injection\" attack, aka \"project mogul\" issue.",
    "81": "all versions marsdb vulnerable command injection. in documentmatcher class, selectors $where clauses passed function constructor unsanitized. this allows attackers run arbitrary commands system function executed. no fix currently available. consider using alternative package fix made available.",
    "82": "mod_digest apache 1.3.31 properly verify nonce client response using authnonce secret.",
    "83": "mod_cgid apache 2.0.48, using threaded mpm, properly handle cgi redirect paths, could cause apache send output cgi program wrong client.",
    "84": "apache webserver 2.0.52 earlier allows remote attackers cause denial service (cpu consumption) via http get request mime header containing multiple lines large number space characters.",
    "85": "apache 1.4.x 1.3.30, 2.0.x 2.0.49, using multiple listening sockets certain platforms, allows remote attackers cause denial service (blocked new connections) via \"short-lived connection rarely-accessed listening socket.\"",
    "86": "stack consumption vulnerability fnmatch implementation apr_fnmatch.c apache portable runtime (apr) library 1.4.3 apache http server 2.2.18, fnmatch.c libc netbsd 5.1, openbsd 4.8, freebsd, apple mac os x 10.6, oracle solaris 10, android, allows context-dependent attackers cause denial service (cpu memory consumption) via *? sequences first argument, demonstrated attacks mod_autoindex httpd.",
    "87": "directory traversal vulnerability r-company unzipper application 1.0.1 earlier android allows remote attackers overwrite create arbitrary files via crafted filename.",
    "88": "the deflate_in_filter function mod_deflate.c mod_deflate module apache http server 2.4.10, request body decompression enabled, allows remote attackers cause denial service (resource consumption) via crafted request data decompresses much larger size.",
    "89": "the mod_cgid module apache http server 2.4.10 timeout mechanism, allows remote attackers cause denial service (process hang) via request cgi script read stdin file descriptor.",
    "90": "ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity",
    "91": "mholt/archiver golang package e4ef56d48eb029648b0e895bb0b6a393ef0829c3 vulnerable directory traversal, allowing attackers write arbitrary files via ../ (dot dot slash) archive entry mishandled extraction. this vulnerability also known 'zip-slip'.",
    "92": "versions 4.2.1 earlier jsonwebtoken affected verification bypass vulnerability. this result weak validation jwt algorithm type, occuring attacker allowed arbitrarily specify jwt algorithm. update version 4.2.2 later. versions 4.2.1 earlier jsonwebtoken affected verification bypass vulnerability. this result weak validation jwt algorithm type, occuring attacker allowed arbitrarily specify jwt algorithm. update version 4.2.2 later. in jsonwebtoken node module 4.2.2 possible attacker bypass verification token digitally signed asymmetric key (rs/es family) algorithms instead attacker send token digitally signed symmetric algorithm (hs* family). in jsonwebtoken node module 4.2.2 possible attacker bypass verification token digitally signed asymmetric key (rs/es family) algorithms instead attacker send token digitally signed symmetric algorithm (hs* family). in jsonwebtoken node module 4.2.2 possible attacker bypass verification token digitally signed asymmetric key (rs/es family) algorithms instead attacker send token digitally signed symmetric algorithm (hs* family).",
    "93": "a deserialization flaw found apache chainsaw versions prior 2.1.0 could lead malicious code execution.",
    "94": "mod_dav.c apache http server 2.2.25 properly determine whether dav enabled uri, allows remote attackers cause denial service (segmentation fault) via merge request uri configured handling mod_dav_svn module, certain href attribute xml data refers non-dav uri.",
    "95": "a default configuration apache debian gnu/linux sets serverroot /usr/doc, allows remote users read documentation files entire server.",
    "96": "ap_escape_quotes() may write beyond end buffer given malicious input. no included modules pass untrusted data functions, third-party / external modules may. this issue affects apache http server 2.4.48 earlier.",
    "97": "affected versions sanitize-html vulnerable cross-site scripting allowedtags includes least one nontexttag. update version 1.11.4 later. sanitize-html library scrubbing html input malicious values. versions 1.11.1 vulnerable cross site scripting (xss) certain scenarios: if allowed least one nontexttags, result potential xss vulnerability. sanitize-html library scrubbing html input malicious values. versions 1.11.1 vulnerable cross site scripting (xss) certain scenarios: if allowed least one nontexttags, result potential xss vulnerability.",
    "98": "versions base64url 3.0.0 vulnerable out-of-bounds reads allocates uninitialized buffers number passed input node.js 4.x below. update version 3.0.0 later.",
    "99": "all versions package lodash prior 4.17.21 vulnerable regular expression denial service (redos) via tonumber, trim trimend functions. steps reproduce (provided reporter liyuan chen): var lo = require('lodash'); function build_blank (n) { var ret = \"1\" (var = 0; < n; i++) { ret += \" \" } return ret + \"1\"; } var = build_blank(50000) var time0 = date.now(); lo.trim(s) var time_cost0 = date.now() - time0; console.log(\"time_cost0: \" + time_cost0) var time1 = date.now(); lo.tonumber(s) var time_cost1 = date.now() - time1; console.log(\"time_cost1: \" + time_cost1) var time2 = date.now(); lo.trimend(s) var time_cost2 = date.now() - time2; console.log(\"time_cost2: \" + time_cost2) lodash versions prior 4.17.21 vulnerable regular expression denial service (redos) via tonumber, trim trimend functions.",
    "100": "integer overflow ap_proxy_send_fb function proxy/proxy_util.c mod_proxy apache http server 1.3.42 64-bit platforms allows remote origin servers cause denial service (daemon crash) possibly execute arbitrary code via large chunk size triggers heap-based buffer overflow.",
    "101": "apache http server mod_cluster version httpd 2.4.23 vulnerable improper input validation protocol parsing logic load balancer resulting segmentation fault serving httpd process.",
    "102": "arbitrary file creation, arbitrary file overwrite, arbitrary code execution node-tar aims guarantee file whose location would outside extraction target directory extracted. this is, part, accomplished sanitizing absolute paths entries within archive, skipping archive entries contain .. path portions, resolving sanitized paths extraction target directory. this logic insufficient windows systems extracting tar files contained path absolute path, specified drive letter different extraction target, c:some\\path. if drive letter match extraction target, example d:\\extraction\\dir, result path.resolve(extractiondirectory, entrypath) would resolve current working directory c: drive, rather extraction target directory. additionally, .. portion path could occur immediately drive letter, c:../foo, properly sanitized logic checked .. within normalized split portions path. this affects users node-tar windows systems. 4.4.18 || 5.0.10 || 6.1.9 there reasonable way work around issue without performing path normalization procedures node-tar does. users encouraged upgrade latest patched versions node-tar, rather attempt sanitize paths themselves. the fixed versions strip path roots paths prior resolved extraction target folder, even paths \"absolute\". additionally, path starting drive letter two dots, like c:../, would bypass check .. path portions. this checked properly patched versions. finally, defense depth check added, entry.absolute outside extraction taret, preservepaths:true mode, warning raised entry, skipped. currently, believed check redundant, catch oversights development. the npm package \"tar\" (aka node-tar) versions 4.4.18, 5.0.10, 6.1.9 arbitrary file creation/overwrite arbitrary code execution vulnerability. node-tar aims guarantee file whose location would outside extraction target directory extracted. this is, part, accomplished sanitizing absolute paths entries within archive, skipping archive entries contain `..` path portions, resolving sanitized paths extraction target directory. this logic insufficient windows systems extracting tar files contained path absolute path, specified drive letter different extraction target, `c:some\\path`. if drive letter match extraction target, example `d:\\extraction\\dir`, result `path.resolve(extractiondirectory, entrypath)` would resolve current working directory `c:` drive, rather extraction target directory. additionally, `..` portion path could occur immediately drive letter, `c:../foo`, properly sanitized logic checked `..` within normalized split portions path. this affects users `node-tar` windows systems. these issues addressed releases 4.4.18, 5.0.10 6.1.9. the v3 branch node-tar deprecated receive patches issues. if still using v3 release recommend update recent version node-tar. there reasonable way work around issue without performing path normalization procedures node-tar does. users encouraged upgrade latest patched versions node-tar, rather attempt sanitize paths themselves.",
    "103": "affected versions sanitize-html sanitize input recursively, may allow attacker execute arbitrary javascript. update version 1.4.3 later. sanitize-html 1.4.3 xss.",
    "104": "affected versions yargs-parser vulnerable prototype pollution. arguments properly sanitized, allowing attacker modify prototype object, causing addition modification existing property exist objects. parsing argument --foo.__proto__.bar baz' adds bar property value baz objects. this exploitable attackers control arguments passed yargs-parser. upgrade versions 13.1.2, 15.0.1, 18.1.1 later.",
    "105": "scoreboard.c apache http server 2.2.21 earlier might allow local users cause denial service (daemon crash shutdown) possibly unspecified impact modifying certain type field within scoreboard shared memory segment, leading invalid call free function.",
    "106": "mod_session_dbd.c mod_session_dbd module apache http server 2.4.5 proceeds save operations session without considering dirty flag requirement new session id, unspecified impact remote attack vectors.",
    "107": "the mod_proxy_ajp module apache http server 2.2.21, used mod_proxy_balancer certain configurations, allows remote attackers cause denial service (temporary \"error state\" backend server) via malformed http request.",
    "108": "withdrawn, accidental duplicate publish. the duration function moment package 2.11.2 node.js allows remote attackers cause denial service (cpu consumption) via long string, aka \"regular expression denial service (redos).\"",
    "109": "cross-site scripting (xss) vulnerability 3 slide gallery fresh theme 7.x-1.4 drupal allows remote authenticated users administer themes permission inject arbitrary web script html via unspecified vectors.",
    "110": "the apache web server win32 may provide access restricted files . (dot) appended requested url.",
    "111": "this affects package vm2 3.9.4. prototype pollution attack vector lead sandbox escape execution arbitrary code host machine. this affects package vm2 3.9.4 via prototype pollution attack vector, lead execution arbitrary code host machine.",
    "112": "the lua_websocket_read function lua_request.c mod_lua module apache http server 2.4.12 allows remote attackers cause denial service (child-process crash) sending crafted websocket ping frame lua script called wsupgrade function.",
    "113": "the npm hbs package express view engine wrapper handlebars. depending usage, users hbs may vulnerable file disclosure vulnerability. there currently patch vulnerability. hbs mixes pure template data engine configuration options express render api. by overwriting internal configuration options file disclosure vulnerability may triggered downstream applications. for example poc see referenced ghsl-2021-020.",
    "114": "the quick login feature slash slashcode redirect user alternate url wrong password provided, makes easier remote web sites guess proper passwords reading username password referrer url.",
    "115": "versions lodash 4.17.5 vulnerable prototype pollution. the vulnerable functions 'defaultsdeep', 'merge', 'mergewith' allow malicious user modify prototype object via {constructor: {prototype: {...}}} causing addition modification existing property exist objects. update version 4.17.11 later. a prototype pollution vulnerability found lodash <4.17.11 functions merge, mergewith, defaultsdeep tricked adding modifying properties object.prototype.",
    "116": "scriptalias directory ncsa apache httpd allowed attackers read cgi programs.",
    "208": "in apache commons io 2.7, when invoking method filenameutils.normalize improper input string, like \"//../foo\", \"\\\\..\\foo\", result would value, thus possibly providing access files parent directory, (thus \"limited\" path traversal), calling code would use result construct path value.",
    "209": "versions including 5.3.3, enforcing algorithms entry specified configuration. when algorithms specified configuration, combination jwks-rsa, may lead authorization bypass. you affected vulnerability following conditions apply: you using express-jwt and you algorithms configured express-jwt configuration. and you using libraries jwks-rsa secret. specify algorithms express-jwt configuration. the following example proper configuration the fix provided patch affect users specified algorithms allowed. the patch makes algorithms required configuration. ist group in express-jwt (npm package) including version 5.3.3, algorithms entry specified configuration enforced. when algorithms specified configuration, combination jwks-rsa, may lead authorization bypass. you affected vulnerability following conditions apply: - you using express-jwt - you **algorithms** configured express-jwt configuration. - you using libraries jwks-rsa **secret**. you fix specifying **algorithms** express-jwt configuration. see linked ghsa example. this also fixed version 6.0.0. in express-jwt (npm package) including version 5.3.3, algorithms entry specified configuration enforced. when algorithms specified configuration, combination jwks-rsa, may lead authorization bypass. you affected vulnerability following conditions apply: - you using express-jwt - you **algorithms** configured express-jwt configuration. - you using libraries jwks-rsa **secret**. you fix specifying **algorithms** express-jwt configuration. see linked ghsa example. this also fixed version 6.0.0.",
    "210": "cross-site scripting (xss) vulnerability jquery 1.6.3, using location.hash select elements, allows remote attackers inject arbitrary web script html via crafted tag. cross-site scripting (xss) vulnerability jquery 1.6.3, using location.hash select elements, allows remote attackers inject arbitrary web script html via crafted tag.",
    "211": "jquery 1.9.0 vulnerable cross-site scripting (xss) attacks. the jquery(strinput) function differentiate selectors html reliable fashion. in vulnerable versions, jquery determined whether input html looking '<' character anywhere string, giving attackers flexibility attempting construct malicious payload. in fixed versions, jquery deems input html explicitly starts '<' character, limiting exploitability attackers control beginning string, far less common. jquery 1.9.0 vulnerable cross-site scripting (xss) attacks. the jquery(strinput) function differentiate selectors html reliable fashion. in vulnerable versions, jquery determined whether input html looking '<' character anywhere string, giving attackers flexibility attempting construct malicious payload. in fixed versions, jquery deems input html explicitly starts '<' character, limiting exploitability attackers control beginning string, far less common.",
    "212": "jquery 3.4.0, used drupal, backdrop cms, products, mishandles jquery.extend(true, {}, ...) object.prototype pollution. if unsanitized source object contained enumerable __proto__ property, could extend native object.prototype. jquery 3.4.0, used drupal, backdrop cms, products, mishandles jquery.extend(true, {}, ...) object.prototype pollution. if unsanitized source object contained enumerable __proto__ property, could extend native object.prototype. jquery 3.4.0, used drupal, backdrop cms, products, mishandles jquery.extend(true, {}, ...) object.prototype pollution. if unsanitized source object contained enumerable __proto__ property, could extend native object.prototype.",
    "213": "in jquery versions greater equal 1.2 3.5.0, passing html untrusted sources - even sanitizing - one jquery's dom manipulation methods (i.e. .html(), .append(), others) may execute untrusted code. this problem patched jquery 3.5.0. in jquery versions greater equal 1.2 3.5.0, passing html untrusted sources - even sanitizing - one jquery's dom manipulation methods (i.e. .html(), .append(), others) may execute untrusted code. this problem patched jquery 3.5.0. in jquery versions greater equal 1.2 3.5.0, passing html untrusted sources - even sanitizing - one jquery's dom manipulation methods (i.e. .html(), .append(), others) may execute untrusted code. this problem patched jquery 3.5.0.",
    "214": "in jquery versions greater equal 1.0.3 3.5.0, passing html containing <option> elements untrusted sources - even sanitizing - one jquery's dom manipulation methods (i.e. .html(), .append(), others) may execute untrusted code. this problem patched jquery 3.5.0. in jquery versions greater equal 1.0.3 3.5.0, passing html containing <option> elements untrusted sources - even sanitizing - one jquery's dom manipulation methods (i.e. .html(), .append(), others) may execute untrusted code. this problem patched jquery 3.5.0. in jquery versions greater equal 1.0.3 3.5.0, passing html containing <option> elements untrusted sources - even sanitizing - one jquery's dom manipulation methods (i.e. .html(), .append(), others) may execute untrusted code. this problem patched jquery 3.5.0.",
    "215": "cross-site scripting (xss) vulnerability jquery 1.6.3, using location.hash select elements, allows remote attackers inject arbitrary web script html via crafted tag. cross-site scripting (xss) vulnerability jquery 1.6.3, using location.hash select elements, allows remote attackers inject arbitrary web script html via crafted tag.",
    "216": "jquery 1.9.0 vulnerable cross-site scripting (xss) attacks. the jquery(strinput) function differentiate selectors html reliable fashion. in vulnerable versions, jquery determined whether input html looking '<' character anywhere string, giving attackers flexibility attempting construct malicious payload. in fixed versions, jquery deems input html explicitly starts '<' character, limiting exploitability attackers control beginning string, far less common. jquery 1.9.0 vulnerable cross-site scripting (xss) attacks. the jquery(strinput) function differentiate selectors html reliable fashion. in vulnerable versions, jquery determined whether input html looking '<' character anywhere string, giving attackers flexibility attempting construct malicious payload. in fixed versions, jquery deems input html explicitly starts '<' character, limiting exploitability attackers control beginning string, far less common.",
    "217": "jquery 3.0.0 vulnerable cross-site scripting (xss) attacks cross-domain ajax request performed without datatype option, causing text/javascript responses executed. jquery 3.0.0 vulnerable cross-site scripting (xss) attacks cross-domain ajax request performed without datatype option, causing text/javascript responses executed.",
    "218": "jquery 3.4.0, used drupal, backdrop cms, products, mishandles jquery.extend(true, {}, ...) object.prototype pollution. if unsanitized source object contained enumerable __proto__ property, could extend native object.prototype. jquery 3.4.0, used drupal, backdrop cms, products, mishandles jquery.extend(true, {}, ...) object.prototype pollution. if unsanitized source object contained enumerable __proto__ property, could extend native object.prototype. jquery 3.4.0, used drupal, backdrop cms, products, mishandles jquery.extend(true, {}, ...) object.prototype pollution. if unsanitized source object contained enumerable __proto__ property, could extend native object.prototype.",
    "219": "in jquery versions greater equal 1.2 3.5.0, passing html untrusted sources - even sanitizing - one jquery's dom manipulation methods (i.e. .html(), .append(), others) may execute untrusted code. this problem patched jquery 3.5.0. in jquery versions greater equal 1.2 3.5.0, passing html untrusted sources - even sanitizing - one jquery's dom manipulation methods (i.e. .html(), .append(), others) may execute untrusted code. this problem patched jquery 3.5.0. in jquery versions greater equal 1.2 3.5.0, passing html untrusted sources - even sanitizing - one jquery's dom manipulation methods (i.e. .html(), .append(), others) may execute untrusted code. this problem patched jquery 3.5.0.",
    "220": "in jquery versions greater equal 1.0.3 3.5.0, passing html containing <option> elements untrusted sources - even sanitizing - one jquery's dom manipulation methods (i.e. .html(), .append(), others) may execute untrusted code. this problem patched jquery 3.5.0. in jquery versions greater equal 1.0.3 3.5.0, passing html containing <option> elements untrusted sources - even sanitizing - one jquery's dom manipulation methods (i.e. .html(), .append(), others) may execute untrusted code. this problem patched jquery 3.5.0. in jquery versions greater equal 1.0.3 3.5.0, passing html containing <option> elements untrusted sources - even sanitizing - one jquery's dom manipulation methods (i.e. .html(), .append(), others) may execute untrusted code. this problem patched jquery 3.5.0.",
    "221": "cross-site scripting (xss) vulnerability jquery.ui.dialog.js dialog widget jquery ui 1.10.0 allows remote attackers inject arbitrary web script html via title option.",
    "222": "cross-site scripting (xss) vulnerability jquery ui 1.12.0 might allow remote attackers inject arbitrary web script html via closetext parameter dialog function.",
    "223": "jquery-ui official jquery user interface library. prior version 1.13.0, accepting value `altfield` option datepicker widget untrusted sources may execute untrusted code. the issue fixed jquery ui 1.13.0. any string value passed `altfield` option treated css selector. a workaround accept value `altfield` option untrusted sources.",
    "224": "jquery-ui official jquery user interface library. prior version 1.13.0, accepting value various `*text` options datepicker widget untrusted sources may execute untrusted code. the issue fixed jquery ui 1.13.0. the values passed various `*text` options always treated pure text, html. a workaround accept value `*text` options untrusted sources.",
    "225": "jquery-ui official jquery user interface library. prior version 1.13.0, accepting value `of` option `.position()` util untrusted sources may execute untrusted code. the issue fixed jquery ui 1.13.0. any string value passed `of` option treated css selector. a workaround accept value `of` option untrusted sources.",
    "226": "jquery 3.0.0 vulnerable cross-site scripting (xss) attacks cross-domain ajax request performed without datatype option, causing text/javascript responses executed. jquery 3.0.0 vulnerable cross-site scripting (xss) attacks cross-domain ajax request performed without datatype option, causing text/javascript responses executed.",
    "227": "jquery 3.4.0, used drupal, backdrop cms, products, mishandles jquery.extend(true, {}, ...) object.prototype pollution. if unsanitized source object contained enumerable __proto__ property, could extend native object.prototype. jquery 3.4.0, used drupal, backdrop cms, products, mishandles jquery.extend(true, {}, ...) object.prototype pollution. if unsanitized source object contained enumerable __proto__ property, could extend native object.prototype. jquery 3.4.0, used drupal, backdrop cms, products, mishandles jquery.extend(true, {}, ...) object.prototype pollution. if unsanitized source object contained enumerable __proto__ property, could extend native object.prototype.",
    "228": "in jquery versions greater equal 1.2 3.5.0, passing html untrusted sources - even sanitizing - one jquery's dom manipulation methods (i.e. .html(), .append(), others) may execute untrusted code. this problem patched jquery 3.5.0. in jquery versions greater equal 1.2 3.5.0, passing html untrusted sources - even sanitizing - one jquery's dom manipulation methods (i.e. .html(), .append(), others) may execute untrusted code. this problem patched jquery 3.5.0. in jquery versions greater equal 1.2 3.5.0, passing html untrusted sources - even sanitizing - one jquery's dom manipulation methods (i.e. .html(), .append(), others) may execute untrusted code. this problem patched jquery 3.5.0.",
    "229": "in jquery versions greater equal 1.0.3 3.5.0, passing html containing <option> elements untrusted sources - even sanitizing - one jquery's dom manipulation methods (i.e. .html(), .append(), others) may execute untrusted code. this problem patched jquery 3.5.0. in jquery versions greater equal 1.0.3 3.5.0, passing html containing <option> elements untrusted sources - even sanitizing - one jquery's dom manipulation methods (i.e. .html(), .append(), others) may execute untrusted code. this problem patched jquery 3.5.0. in jquery versions greater equal 1.0.3 3.5.0, passing html containing <option> elements untrusted sources - even sanitizing - one jquery's dom manipulation methods (i.e. .html(), .append(), others) may execute untrusted code. this problem patched jquery 3.5.0.",
    "230": "versions 4.2.1 earlier jsonwebtoken affected verification bypass vulnerability. this result weak validation jwt algorithm type, occuring attacker allowed arbitrarily specify jwt algorithm. update version 4.2.2 later. versions 4.2.1 earlier jsonwebtoken affected verification bypass vulnerability. this result weak validation jwt algorithm type, occuring attacker allowed arbitrarily specify jwt algorithm. update version 4.2.2 later. in jsonwebtoken node module 4.2.2 possible attacker bypass verification token digitally signed asymmetric key (rs/es family) algorithms instead attacker send token digitally signed symmetric algorithm (hs* family). in jsonwebtoken node module 4.2.2 possible attacker bypass verification token digitally signed asymmetric key (rs/es family) algorithms instead attacker send token digitally signed symmetric algorithm (hs* family). in jsonwebtoken node module 4.2.2 possible attacker bypass verification token digitally signed asymmetric key (rs/es family) algorithms instead attacker send token digitally signed symmetric algorithm (hs* family).",
    "231": "affected versions sanitize-html vulnerable cross-site scripting allowedtags includes least one nontexttag. update version 1.11.4 later. sanitize-html library scrubbing html input malicious values. versions 1.11.1 vulnerable cross site scripting (xss) certain scenarios: if allowed least one nontexttags, result potential xss vulnerability. sanitize-html library scrubbing html input malicious values. versions 1.11.1 vulnerable cross site scripting (xss) certain scenarios: if allowed least one nontexttags, result potential xss vulnerability.",
    "232": "",
    "233": "",
    "1320": "ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity ansi-regex vulnerable inefficient regular expression complexity",
    "1321": "`base64url` allocates uninitialized buffers number passed input node.js 4.x",
    "1322": "versions `base64url` 3.0.0 vulnerable out-of-bounds reads allocates uninitialized buffers number passed input node.js 4.x below. ## recommendation update version 3.0.0 later.",
    "1323": "versions including 5.3.3, enforcing algorithms entry specified configuration. when algorithms specified configuration, combination jwks-rsa, may lead authorization bypass. you affected vulnerability following conditions apply: you using express-jwt and you algorithms configured express-jwt configuration. and you using libraries jwks-rsa secret. specify algorithms express-jwt configuration. the following example proper configuration the fix provided patch affect users specified algorithms allowed. the patch makes algorithms required configuration. ist group in express-jwt (npm package) including version 5.3.3, algorithms entry specified configuration enforced. when algorithms specified configuration, combination jwks-rsa, may lead authorization bypass. you affected vulnerability following conditions apply: - you using express-jwt - you **algorithms** configured express-jwt configuration. - you using libraries jwks-rsa **secret**. you fix specifying **algorithms** express-jwt configuration. see linked ghsa example. this also fixed version 6.0.0. in express-jwt (npm package) including version 5.3.3, algorithms entry specified configuration enforced. when algorithms specified configuration, combination jwks-rsa, may lead authorization bypass. you affected vulnerability following conditions apply: - you using express-jwt - you **algorithms** configured express-jwt configuration. - you using libraries jwks-rsa **secret**. you fix specifying **algorithms** express-jwt configuration. see linked ghsa example. this also fixed version 6.0.0.",
    "1324": "versions 4.2.1 earlier jsonwebtoken affected verification bypass vulnerability. this result weak validation jwt algorithm type, occuring attacker allowed arbitrarily specify jwt algorithm. update version 4.2.2 later. versions 4.2.1 earlier jsonwebtoken affected verification bypass vulnerability. this result weak validation jwt algorithm type, occuring attacker allowed arbitrarily specify jwt algorithm. update version 4.2.2 later. in jsonwebtoken node module 4.2.2 possible attacker bypass verification token digitally signed asymmetric key (rs/es family) algorithms instead attacker send token digitally signed symmetric algorithm (hs* family). in jsonwebtoken node module 4.2.2 possible attacker bypass verification token digitally signed asymmetric key (rs/es family) algorithms instead attacker send token digitally signed symmetric algorithm (hs* family). in jsonwebtoken node module 4.2.2 possible attacker bypass verification token digitally signed asymmetric key (rs/es family) algorithms instead attacker send token digitally signed symmetric algorithm (hs* family).",
    "1325": "it possible attacker bypass verification \"a token digitally signed asymetric key (rs/es family) algorithms instead attacker send token digitally signed symmetric algorithm (hs* family)\" [1] it possible attacker bypass verification \"a token digitally signed asymetric key (rs/es family) algorithms instead attacker send token digitally signed symmetric algorithm (hs* family)\" [1]",
    "1326": "versions 4.2.1 earlier jsonwebtoken affected verification bypass vulnerability. this result weak validation jwt algorithm type, occuring attacker allowed arbitrarily specify jwt algorithm. update version 4.2.2 later. versions 4.2.1 earlier jsonwebtoken affected verification bypass vulnerability. this result weak validation jwt algorithm type, occuring attacker allowed arbitrarily specify jwt algorithm. update version 4.2.2 later. in jsonwebtoken node module 4.2.2 possible attacker bypass verification token digitally signed asymmetric key (rs/es family) algorithms instead attacker send token digitally signed symmetric algorithm (hs* family). in jsonwebtoken node module 4.2.2 possible attacker bypass verification token digitally signed asymmetric key (rs/es family) algorithms instead attacker send token digitally signed symmetric algorithm (hs* family). in jsonwebtoken node module 4.2.2 possible attacker bypass verification token digitally signed asymmetric key (rs/es family) algorithms instead attacker send token digitally signed symmetric algorithm (hs* family).",
    "1327": "it possible attacker bypass verification \"a token digitally signed asymetric key (rs/es family) algorithms instead attacker send token digitally signed symmetric algorithm (hs* family)\" [1] it possible attacker bypass verification \"a token digitally signed asymetric key (rs/es family) algorithms instead attacker send token digitally signed symmetric algorithm (hs* family)\" [1]",
    "1328": "since \"algorithm\" enforced `jws.verify()`, malicious user could choose algorithm sent server. if server expecting rsa sent hmac-sha rsa's public key, server think public key actually hmac private key. this could used forge data attacker wants. in addition, `none` algorithm concerned about. in versions prior 3.0.0, verification token could bypassed `alg` field set `none`. *edit ( 7/29/16 ): a previous version advisory incorrectly stated vulnerability patched version 2.0.0 instead 3.0.0. the advisory updated reflect new information. thanks fabien catteau reporting error.*",
    "1329": "versions lodash 4.17.12 vulnerable prototype pollution. the function defaultsdeep allows malicious user modify prototype object via {constructor: {prototype: {...}}} causing addition modification existing property exist objects. update version 4.17.12 later. versions lodash lower 4.17.12 vulnerable prototype pollution. the function defaultsdeep could tricked adding modifying properties object.prototype using constructor payload.",
    "1330": "versions lodash 4.17.5 vulnerable prototype pollution. the vulnerable functions 'defaultsdeep', 'merge', 'mergewith' allow malicious user modify prototype object via {constructor: {prototype: {...}}} causing addition modification existing property exist objects. update version 4.17.11 later. a prototype pollution vulnerability found lodash <4.17.11 functions merge, mergewith, defaultsdeep tricked adding modifying properties object.prototype.",
    "1331": "versions lodash prior 4.17.19 vulnerable prototype pollution. the function zipobjectdeep allows malicious user modify prototype object property identifiers user-supplied. being affected issue requires zipping objects based user-provided property arrays. this vulnerability causes addition modification existing property exist objects may lead denial service code execution specific circumstances. prototype pollution attack using _.zipobjectdeep lodash 4.17.20.",
    "1332": "lodash versions prior 4.17.21 vulnerable command injection via template function. lodash versions prior 4.17.21 vulnerable command injection via template function.",
    "1333": "lodash prior 4.7.11 affected by: cwe-400: uncontrolled resource consumption. the impact is: denial service. the component is: date handler. the attack vector is: attacker provides long strings, library attempts match using regular expression. the fixed version is: 4.7.11. lodash prior 4.17.11 affected by: cwe-400: uncontrolled resource consumption. the impact is: denial service. the component is: date handler. the attack vector is: attacker provides long strings, library attempts match using regular expression. the fixed version is: 4.17.11.",
    "1334": "all versions package lodash prior 4.17.21 vulnerable regular expression denial service (redos) via tonumber, trim trimend functions. steps reproduce (provided reporter liyuan chen): var lo = require('lodash'); function build_blank (n) { var ret = \"1\" (var = 0; < n; i++) { ret += \" \" } return ret + \"1\"; } var = build_blank(50000) var time0 = date.now(); lo.trim(s) var time_cost0 = date.now() - time0; console.log(\"time_cost0: \" + time_cost0) var time1 = date.now(); lo.tonumber(s) var time_cost1 = date.now() - time1; console.log(\"time_cost1: \" + time_cost1) var time2 = date.now(); lo.trimend(s) var time_cost2 = date.now() - time2; console.log(\"time_cost2: \" + time_cost2) lodash versions prior 4.17.21 vulnerable regular expression denial service (redos) via tonumber, trim trimend functions.",
    "1335": "versions lodash 4.17.5 vulnerable prototype pollution. the vulnerable functions 'defaultsdeep', 'merge', 'mergewith' allow malicious user modify prototype object via __proto__ causing addition modification existing property exist objects. update version 4.17.5 later. lodash node module 4.17.5 suffers modification assumed-immutable data (maid) vulnerability via defaultsdeep, merge, mergewith functions, allows malicious user modify prototype \"object\" via __proto__, causing addition modification existing property exist objects.",
    "1336": "all versions `marsdb` vulnerable command injection. in `documentmatcher` class, selectors `$where` clauses passed function constructor unsanitized. this allows attackers run arbitrary commands system function executed. ## recommendation no fix currently available. consider using alternative package fix made available.",
    "1337": "affected versions moment vulnerable low severity regular expression denial service parsing dates strings. update version 2.19.3 later. the moment module 2.19.3 node.js prone regular expression denial service via crafted date string, different vulnerability cve-2016-4055.",
    "1338": "versions moment prior 2.11.2 affected regular expression denial service vulnerability. the vulnerability triggered arbitrary user input passed moment.duration(). please update version 2.11.2 later. the duration function moment package 2.11.2 node.js allows remote attackers cause denial service (cpu consumption) via long string, aka \"regular expression denial service (redos).\"",
    "1339": "affected versions sanitize-html sanitize input recursively, may allow attacker execute arbitrary javascript. update version 1.4.3 later. sanitize-html 1.4.3 xss.",
    "1340": "affected versions sanitize-html vulnerable cross-site scripting allowedtags includes least one nontexttag. update version 1.11.4 later. sanitize-html library scrubbing html input malicious values. versions 1.11.1 vulnerable cross site scripting (xss) certain scenarios: if allowed least one nontexttags, result potential xss vulnerability. sanitize-html library scrubbing html input malicious values. versions 1.11.1 vulnerable cross site scripting (xss) certain scenarios: if allowed least one nontexttags, result potential xss vulnerability.",
    "1341": "apostrophe technologies sanitize-html 2.3.1 properly handle internationalized domain name (idn) could allow attacker bypass hostname whitelist validation set \"allowediframehostnames\" option. apostrophe technologies sanitize-html 2.3.1 properly handle internationalized domain name (idn) could allow attacker bypass hostname whitelist validation set \"allowediframehostnames\" option.",
    "1342": "apostrophe technologies sanitize-html 2.3.2 properly validate hostnames set \"allowediframehostnames\" option \"allowiframerelativeurls\" set true, allows attackers bypass hostname whitelist iframe element, related using src value starts \"/\\example.com\". apostrophe technologies sanitize-html 2.3.2 properly validate hostnames set \"allowediframehostnames\" option \"allowiframerelativeurls\" set true, allows attackers bypass hostname whitelist iframe element, related using src value starts \"/\\\\example.com\".",
    "1343": "sanitize-html library scrubbing html input malicious values. versions 1.11.1 vulnerable cross site scripting (xss) certain scenarios: if allowed least one nontexttags, result potential xss vulnerability. poc: ``` var sanitizehtml = require('sanitize-html'); var dirty = '!<textarea>&lt;/textarea&gt;<svg/onload=prompt`xs`&gt;</textarea>!'; var clean = sanitizehtml(dirty, { allowedtags: [ 'textarea' ] }); console.log(clean); // !<textarea></textarea><svg/onload=prompt`xs`></textarea>! ```",
    "1344": "arbitrary file creation, arbitrary file overwrite, arbitrary code execution node-tar aims guarantee file whose location would modified symbolic link extracted. this is, part, achieved ensuring extracted directories symlinks. additionally, order prevent unnecessary stat calls determine whether given path directory, paths cached directories created. this logic insufficient extracting tar files contained directory symlink name directory. this order operations resulted directory created added node-tar directory cache. when directory present directory cache, subsequent calls mkdir directory skipped. however, also node-tar checks symlinks occur. by first creating directory, replacing directory symlink, thus possible bypass node-tar symlink checks directories, essentially allowing untrusted tar file symlink arbitrary location subsequently extracting arbitrary files location, thus allowing arbitrary file creation overwrite. this issue addressed releases 3.2.3, 4.4.15, 5.0.7 6.1.2. 3.2.3 || 4.4.15 || 5.0.7 || 6.1.2 users may work around vulnerability without upgrading creating custom filter method prevents extraction symbolic links. users encouraged upgrade latest patch versions, rather attempt sanitize tar input themselves. the npm package \"tar\" (aka node-tar) versions 6.1.2, 5.0.7, 4.4.15, 3.2.3 arbitrary file creation/overwrite vulnerability via insufficient symlink protection. `node-tar` aims guarantee file whose location would modified symbolic link extracted. this is, part, achieved ensuring extracted directories symlinks. additionally, order prevent unnecessary `stat` calls determine whether given path directory, paths cached directories created. this logic insufficient extracting tar files contained directory symlink name directory. this order operations resulted directory created added `node-tar` directory cache. when directory present directory cache, subsequent calls mkdir directory skipped. however, also `node-tar` checks symlinks occur. by first creating directory, replacing directory symlink, thus possible bypass `node-tar` symlink checks directories, essentially allowing untrusted tar file symlink arbitrary location subsequently extracting arbitrary files location, thus allowing arbitrary file creation overwrite. this issue addressed releases 3.2.3, 4.4.15, 5.0.7 6.1.2.",
    "1345": "arbitrary file creation, arbitrary file overwrite, arbitrary code execution node-tar aims prevent extraction absolute file paths turning absolute paths relative paths preservepaths flag set true. this achieved stripping absolute path root absolute file paths contained tar file. for example /home/user/.bashrc would turn home/user/.bashrc. this logic insufficient file paths contained repeated path roots ////home/user/.bashrc. node-tar would strip single path root paths. when given absolute file path repeating path roots, resulting path (e.g. ///home/user/.bashrc) would still resolve absolute path, thus allowing arbitrary file creation overwrite. 3.2.2 || 4.4.14 || 5.0.6 || 6.1.1 note: adjacent issue cve-2021-32803 affects release level. please ensure update latest patch levels address cve-2021-32803 well adjacent issue affects node-tar use case. users may work around vulnerability without upgrading creating custom onentry method sanitizes entry.path filter method removes entries absolute paths. users encouraged upgrade latest patch versions, rather attempt sanitize tar input themselves. the npm package \"tar\" (aka node-tar) versions 6.1.1, 5.0.6, 4.4.14, 3.3.2 arbitrary file creation/overwrite vulnerability due insufficient absolute path sanitization. node-tar aims prevent extraction absolute file paths turning absolute paths relative paths `preservepaths` flag set `true`. this achieved stripping absolute path root absolute file paths contained tar file. for example `/home/user/.bashrc` would turn `home/user/.bashrc`. this logic insufficient file paths contained repeated path roots `////home/user/.bashrc`. `node-tar` would strip single path root paths. when given absolute file path repeating path roots, resulting path (e.g. `///home/user/.bashrc`) would still resolve absolute path, thus allowing arbitrary file creation overwrite. this issue addressed releases 3.2.2, 4.4.14, 5.0.6 6.1.1. users may work around vulnerability without upgrading creating custom `onentry` method sanitizes `entry.path` `filter` method removes entries absolute paths. see referenced github advisory details. be aware cve-2021-32803 fixes similar bug later versions tar.",
    "1346": "arbitrary file creation, arbitrary file overwrite, arbitrary code execution node-tar aims guarantee file whose location would modified symbolic link extracted. this is, part, achieved ensuring extracted directories symlinks. additionally, order prevent unnecessary stat calls determine whether given path directory, paths cached directories created. this logic insufficient extracting tar files contained directory symlink name directory, symlink directory names archive entry used backslashes path separator posix systems. the cache checking logic used \\ / characters path separators, however \\ valid filename character posix systems. by first creating directory, replacing directory symlink, thus possible bypass node-tar symlink checks directories, essentially allowing untrusted tar file symlink arbitrary location subsequently extracting arbitrary files location, thus allowing arbitrary file creation overwrite. additionally, similar confusion could arise case-insensitive filesystems. if tar archive contained directory foo, followed symbolic link named foo, case-insensitive file systems, creation symbolic link would remove directory filesystem, internal directory cache, would treated cache hit. a subsequent file entry within foo directory would placed target symbolic link, thinking directory already created. these issues addressed releases 4.4.16, 5.0.8 6.1.7. the v3 branch node-tar deprecated receive patches issues. if still using v3 release recommend update recent version node-tar. if possible, workaround available below. 4.4.16 || 5.0.8 || 6.1.7 users may work around vulnerability without upgrading creating custom filter method prevents extraction symbolic links. users encouraged upgrade latest patched versions, rather attempt sanitize tar input themselves. the problem addressed following ways: note means entry objects exposed various parts tar's api always use / path separator, even windows systems. this expected cause problems, / valid path separator windows systems, may result issues entry.path compared path string coming api fs.realpath() path.resolve(). users encouraged always normalize paths using well-tested method path.resolve() comparing paths one another. the npm package \"tar\" (aka node-tar) versions 4.4.16, 5.0.8, 6.1.7 arbitrary file creation/overwrite arbitrary code execution vulnerability. node-tar aims guarantee file whose location would modified symbolic link extracted. this is, part, achieved ensuring extracted directories symlinks. additionally, order prevent unnecessary stat calls determine whether given path directory, paths cached directories created. this logic insufficient extracting tar files contained directory symlink name directory, symlink directory names archive entry used backslashes path separator posix systems. the cache checking logic used `\\` `/` characters path separators, however `\\` valid filename character posix systems. by first creating directory, replacing directory symlink, thus possible bypass node-tar symlink checks directories, essentially allowing untrusted tar file symlink arbitrary location subsequently extracting arbitrary files location, thus allowing arbitrary file creation overwrite. additionally, similar confusion could arise case-insensitive filesystems. if tar archive contained directory `foo`, followed symbolic link named `foo`, case-insensitive file systems, creation symbolic link would remove directory filesystem, _not_ internal directory cache, would treated cache hit. a subsequent file entry within `foo` directory would placed target symbolic link, thinking directory already created. these issues addressed releases 4.4.16, 5.0.8 6.1.7. the v3 branch node-tar deprecated receive patches issues. if still using v3 release recommend update recent version node-tar. if possible, workaround available referenced ghsa-9r2w-394v-53qc.",
    "1347": "arbitrary file creation, arbitrary file overwrite, arbitrary code execution node-tar aims guarantee file whose location would modified symbolic link extracted. this is, part, achieved ensuring extracted directories symlinks. additionally, order prevent unnecessary stat calls determine whether given path directory, paths cached directories created. this logic insufficient extracting tar files contained two directories symlink names containing unicode values normalized value. additionally, windows systems, long path portions would resolve file system entities 8.3 \"short path\" counterparts. a specially crafted tar archive could thus include directories two forms path resolve file system entity, followed symbolic link name first form, lastly followed file using second form. it led bypassing node-tar symlink checks directories, essentially allowing untrusted tar file symlink arbitrary location subsequently extracting arbitrary files location, thus allowing arbitrary file creation overwrite. the v3 branch node-tar deprecated receive patches issues. if still using v3 release recommend update recent version node-tar. if possible, workaround available below. 6.1.9 || 5.0.10 || 4.4.18 users may work around vulnerability without upgrading creating custom filter method prevents extraction symbolic links. users encouraged upgrade latest patched versions, rather attempt sanitize tar input themselves. the problem addressed following ways, comparing paths directory cache path reservation systems: the npm package \"tar\" (aka node-tar) versions 4.4.18, 5.0.10, 6.1.9 arbitrary file creation/overwrite arbitrary code execution vulnerability. node-tar aims guarantee file whose location would modified symbolic link extracted. this is, part, achieved ensuring extracted directories symlinks. additionally, order prevent unnecessary stat calls determine whether given path directory, paths cached directories created. this logic insufficient extracting tar files contained directory symlink names containing unicode values normalized value. additionally, windows systems, long path portions would resolve file system entities 8.3 \"short path\" counterparts. a specially crafted tar archive could thus include directory one form path, followed symbolic link different string resolves file system entity, followed file using first form. by first creating directory, replacing directory symlink different apparent name resolved entry filesystem, thus possible bypass node-tar symlink checks directories, essentially allowing untrusted tar file symlink arbitrary location subsequently extracting arbitrary files location, thus allowing arbitrary file creation overwrite. these issues addressed releases 4.4.18, 5.0.10 6.1.9. the v3 branch node-tar deprecated receive patches issues. if still using v3 release recommend update recent version node-tar. if possible, workaround available referenced ghsa-qq89-hq3f-393p.",
    "1348": "arbitrary file creation, arbitrary file overwrite, arbitrary code execution node-tar aims guarantee file whose location would outside extraction target directory extracted. this is, part, accomplished sanitizing absolute paths entries within archive, skipping archive entries contain .. path portions, resolving sanitized paths extraction target directory. this logic insufficient windows systems extracting tar files contained path absolute path, specified drive letter different extraction target, c:some\\path. if drive letter match extraction target, example d:\\extraction\\dir, result path.resolve(extractiondirectory, entrypath) would resolve current working directory c: drive, rather extraction target directory. additionally, .. portion path could occur immediately drive letter, c:../foo, properly sanitized logic checked .. within normalized split portions path. this affects users node-tar windows systems. 4.4.18 || 5.0.10 || 6.1.9 there reasonable way work around issue without performing path normalization procedures node-tar does. users encouraged upgrade latest patched versions node-tar, rather attempt sanitize paths themselves. the fixed versions strip path roots paths prior resolved extraction target folder, even paths \"absolute\". additionally, path starting drive letter two dots, like c:../, would bypass check .. path portions. this checked properly patched versions. finally, defense depth check added, entry.absolute outside extraction taret, preservepaths:true mode, warning raised entry, skipped. currently, believed check redundant, catch oversights development. the npm package \"tar\" (aka node-tar) versions 4.4.18, 5.0.10, 6.1.9 arbitrary file creation/overwrite arbitrary code execution vulnerability. node-tar aims guarantee file whose location would outside extraction target directory extracted. this is, part, accomplished sanitizing absolute paths entries within archive, skipping archive entries contain `..` path portions, resolving sanitized paths extraction target directory. this logic insufficient windows systems extracting tar files contained path absolute path, specified drive letter different extraction target, `c:some\\path`. if drive letter match extraction target, example `d:\\extraction\\dir`, result `path.resolve(extractiondirectory, entrypath)` would resolve current working directory `c:` drive, rather extraction target directory. additionally, `..` portion path could occur immediately drive letter, `c:../foo`, properly sanitized logic checked `..` within normalized split portions path. this affects users `node-tar` windows systems. these issues addressed releases 4.4.18, 5.0.10 6.1.9. the v3 branch node-tar deprecated receive patches issues. if still using v3 release recommend update recent version node-tar. there reasonable way work around issue without performing path normalization procedures node-tar does. users encouraged upgrade latest patched versions node-tar, rather attempt sanitize paths themselves.",
    "1349": "this affects package vm2 3.9.4. prototype pollution attack vector lead sandbox escape execution arbitrary code host machine. this affects package vm2 3.9.4 via prototype pollution attack vector, lead execution arbitrary code host machine.",
    "1350": "the package vm2 3.9.6 vulnerable sandbox bypass via direct access host error objects generated node internals generation stacktraces, lead execution arbitrary code host machine. the package vm2 3.9.6 vulnerable sandbox bypass via direct access host error objects generated node internals generation stacktraces, lead execution arbitrary code host machine."
}


for (const prediction of unmatchedPredictions) {
    let wordsInFindings = {};
    for (const findingId of prediction) {
        let corpusTextWords = corpus[findingId].split(" ");
        // trim special characters to prevent mis-identification
        let processedWord;
        for (const corpusTextWord of corpusTextWords) {
            processedWord = corpusTextWord;
            for (const specialChar of [" ", ",", ";", ".", "`", "'", '"']) {
                processedWord = _.trim(processedWord, specialChar);
            }
            (wordsInFindings[processedWord] instanceof Set) ? wordsInFindings[processedWord].add(findingId) : wordsInFindings[processedWord] = new Set([findingId]);
        }
    }
    // keep words present in all findings
    const predictionSet = new Set(prediction);
    let repeatedWords = [];
    for (const [word, findingIdSet] of Object.entries(wordsInFindings)) {
        // skip if word is not present in all texts
        if (!_.isEqual(findingIdSet, predictionSet)) continue;
        // modify each instance of word for each finding text
        repeatedWords.push(word);
        // corpus[findingId] = corpus[findingId].replaceAll(word, `<mark>${word}</mark>`);
    }

    for (const findingId of prediction) {
        const findingText = corpus[findingId];
        let allWordsIndexes = [], indexWordMapping = {};
        for (const word of repeatedWords) {
            // find all indexes of word in text
            const wordIndexes = [...findingText.matchAll(new RegExp(word, 'gi'))].map(a => a.index);
            // create index<-word mapping for later use
            for (const wordIndex of wordIndexes) indexWordMapping[wordIndex] = word.length;
            allWordsIndexes.push(...wordIndexes)
        }
        // sort list in ascending order
        allWordsIndexes = allWordsIndexes.sort((a, b) => { return a - b; });
        let offset = 0;
        let splitFindingsText = [];
        // [9, 56, ...] , [0, 34, ...] -> [[0, 9], [9, 18], [18, 56], ...], [[0, 9],
        for (const wordIndex of allWordsIndexes) {
            splitFindingsText.push({highlight: false, text: findingText.substring(offset, wordIndex)});
            offset = wordIndex + indexWordMapping[wordIndex];
            splitFindingsText.push({highlight: true, text: findingText.substring(wordIndex, offset)});
        }
        console.log(splitFindingsText);
    }
}
